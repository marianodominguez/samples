{"ts":1371832550247,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n* binary tree implementation.\n* includes DFS\n*\n**/\n\nvar Tree = function () {\n        this.node = null;\n        this.left = null;\n        this.right = null;\n};\n\nmodule.exports = {\n    Tree:Tree\n};\n\nfunction Node(val) {\n    this.value = val;\n};\n\nTree.prototype = \n{\n    addNode : function (v) {\n        var newNode = new Node(v);\n        if (this.node === null) {\n            this.node = newNode;\n        }\n        else if (this.node.value <= v)\n        {\n            if (this.left === null) {\n                this.left = new Tree();\n                this.left.node = newNode;\n            } \n            else {\n                this.left.addNode(v);\n            }\n        }\n        else {\n            if (this.right === null) {\n                this.right = new Tree();\n                this.right.node = newNode;\n            }\n            else {\n                this.right.addNode(v);\n            }\n        }\n    },\n    dfsFind : function(val) {\n        var stack= [this];\n        var current = null;\n        \n        while (stack.length > 0) {\n            current = stack.pop();\n            console.log(\"reviewing \" + current.node.value );\n            if(current.node.value === val) {\n                return current;\n            }\n            else {\n                if (current.left !== null) {\n                    stack.push(current.left);\n                }\n                if (current.right !== null) {\n                    stack.push(current.right);\n                }\n            }\n        }\n        return null;\n    },\n    inorder : function inorder(tree) {\n        if (tree === undefined) tree = this;\n        if (tree === null) return;\n        inorder(tree.left);\n        console.log(tree.node.value + \",\");\n        inorder(tree.right);\n    },\n    binaryFind : function bf(v, root) {\n        if (root === undefined) root = this;\n        var val = root.node.value;\n        console.log(\"BF examine : \" + val);\n        if ( val === v) {\n            return root;\n        }\n        if (val < v) {\n            if (root.left !== null) return bf(v, root.left);\n        }\n        else {\n            if (root.right !== null) return bf(v, root.right);\n        }\n        return null;\n    }\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2187}]],"length":2187}
