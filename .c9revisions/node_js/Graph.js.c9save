{"ts":1371832445783,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var Vertex = function () {\n    this.value = null;\n    this.adj = [];\n};\n\nvar Graph = function() {\n    this.V = [];\n    this.size = 0;\n};\n\nmodule.exports = {\n    Graph : Graph\n};\n\nGraph.prototype = {\n    addEdge : function (idx1, idx2) {\n        if (typeof idx1 !== 'number' || typeof idx1 !== 'number' ) {\n            throw \"Graph indices should be numbers\";\n        }\n        var V1 = this.V[idx1];\n        var V2 = this.V[idx2];\n        \n        if (!V1) {\n            V1 = new Vertex();\n            this.V[idx1] = V1;\n            this.size+=1;\n        }\n        if (!V2) {\n            V2 = new Vertex();\n            this.V[idx2] = V2;\n            this.size+=1;\n        }\n        V1.adj.push(idx2);\n        V2.adj.push(idx1);\n    },\n    addVertex: function(idx, value) {\n        if (typeof idx !== 'number') {\n            throw \"Graph indices should be numbers\";\n        }\n        var vertex = this.V[idx];\n        if (!vertex) {\n            vertex = new Vertex();\n            this.V[idx] = vertex;\n            this.size++;\n        }\n        vertex.value = value;\n    },\n    toString : function() {\n        return JSON.stringify(this, null, 2);\n    },\n    get : function(i) {\n        return this.V[i];\n    },\n    getAdj : function(i) {\n        return this.V[i].adj;\n    },\n    dfs : function (start) {\n        if (this.V===null || this.size===0) return [];\n        if (!start) start=0;\n        var visited = [];\n        var path = [];\n        var stack = [];\n        stack.push(start);\n        visited.push(start);\n        var current = start;\n        while(stack.length !== 0) {\n            current = stack.pop();\n\n            //console.log(\"current : \" + current);\n\n            var adjList = this.getAdj(current);\n            for (var i in adjList) {\n                var neighbor = adjList[i];\n                if (visited.indexOf(neighbor) < 0 ) {\n                    stack.push(neighbor);\n                    visited.push(neighbor);\n                }\n            }\n\n            path.push(current);\n            //console.log(stack);\n        }\n        return path;\n    }\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2078}]],"length":2078}
