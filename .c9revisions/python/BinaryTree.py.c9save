{"ts":1371832568098,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"from collections import deque\n\ndef makeSafe(node):\n    if node == None: return \"\"\n    else: return node.content\n\nclass Node:\n    def __init__(self, x):\n        self.content = x\n        self.left = None\n        self.right = None\n    def __str__(self):\n        return \"/\" + self.content + \"/\"\n    \nclass Tree:\n    def __init__(self):\n        self.root = None\n        \n    def add(self, node, pivot):\n        if pivot == None:\n            self.root = node\n        else:\n            if pivot.content < node.content:\n                if pivot.right == None:\n                    pivot.right = node \n                else:\n                    self.add(node, pivot.right)\n            else:\n                if pivot.left == None:\n                    pivot.left = node \n                else:\n                    self.add(node, pivot.left)\n     \n    def put(self, x):\n        n = Node(x)\n        self.add(n, self.root)\n    \n    def inorder(self, node):\n        if node == None: return [];\n        if node.left == None and node.right == None: \n            return [node.content]\n        else:\n            result = []\n            result.extend(self.inorder(node.left))\n            result.extend([node.content])\n            result.extend(self.inorder(node.right))\n            return result\n\n    def postorder(self, node):\n        if node == None: return [];\n        if node.left == None and node.right == None: \n            return [node.content]\n        else:\n            result = []\n            result.extend(self.postorder(node.left))\n            result.extend(self.postorder(node.right))\n            result.extend([node.content])\n            return result\n\n    def preorder(self, node ):\n        if node == None: return [];\n        if node.left == None and node.right == None: \n            return [node.content]\n        else:\n            result = []\n            result.extend([node.content])\n            result.extend(self.preorder(node.left))\n            result.extend(self.preorder(node.right))\n            return result\n        \n    def bfs(self, nodeToSearch):\n        visited = []        \n        queue = deque([self.root])\n        current = self.root\n        path = [];\n        \n        while True:\n            if queue == [] : return []\n            if current.content == nodeToSearch:\n                return [(x.content,makeSafe(x.left),makeSafe(x.right)) for x in path]            \n            \n            if current not in visited:\n                for next in [current.left, current.right]:\n                    if next!= None: queue.append(next)\n                visited.append(current)\n            current = queue.popleft()\n            path.append(current);\n            \n    def dfs(self, nodeToSearch):\n        visited=[]\n        stack = [self.root]\n        current = self.root\n        path = []\n        \n        while True:\n            if stack == [] : return []\n            if current.content == nodeToSearch:\n                return [(x.content,makeSafe(x.left),makeSafe(x.right)) for x in path]            \n            if current not in visited:\n                for next in [current.left, current.right]:\n                    if next!= None: stack.append(next)\n                visited.append(current)\n            current = stack.pop()\n            path.append(current)\n            \n    def binarySearch(self, nodeToSearch):\n        current = self.root;\n        path = [self.root]\n        while True:\n            if current.content == nodeToSearch:\n                return [(x.content,makeSafe(x.left),makeSafe(x.right)) for x in path]\n            next = None\n            if nodeToSearch < current.content:\n                if current.left != None: next = current.left\n            else:\n                if current.right != None: next = current.right\n            if next==None: return []\n            path.append(next)\n            current = next;"]],"start1":0,"start2":0,"length1":0,"length2":3839}]],"length":3839}
